{"componentChunkName":"component---node-modules-reflexjs-gatsby-theme-doc-src-doc-template-js","path":"/docs/navs","result":{"data":{"doc":{"__typename":"MdxDoc","id":"ab0e55c3-c23a-53f7-8020-8476c500e988","title":"Navs","slug":"/docs/navs","excerpt":"Use navs to build header, footer and other navigation menus using mdx files.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Navs\",\n  \"excerpt\": \"Use navs to build header, footer and other navigation menus using mdx files.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Add a nav\"), mdx(\"p\", null, \"To add a nav, simply create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/content/navs\"), \" directory.\"), mdx(\"p\", null, \"Navs uses using simple lists of links.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/navs/main.mdx\",\n    \"title\": \"content/navs/main.mdx\"\n  }), \"- [Home](/home)\\n- [Blocks](/blocks)\\n  - [Headers](/blocks/headers)\\n  - [Hero](/blocks/hero)\\n  - [Footers](/blocks/footers)\\n- [Docs](/docs)\\n  - [Components](/docs/components)\\n  - [Images](/docs/images)\\n\")), mdx(\"h2\", null, \"Rendering navs\"), mdx(\"p\", null, \"Once your nav has been created, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NavMenu\"), \" component to render the nav.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=content/blocks/header.mdx\",\n    \"title\": \"content/blocks/header.mdx\"\n  }), \"<NavMenu name=\\\"example\\\" />\\n\")), mdx(\"h2\", null, \"Add dropdown\"), mdx(\"p\", null, \"Add a dropdown by using a nested list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\",\n    \"metastring\": \"title=content/navs/example.mdx\",\n    \"title\": \"content/navs/example.mdx\"\n  }), \"- [Home](/)\\n- Dropdown // highlight-line\\n  - [Item One](/item-one) // highlight-line\\n  - [Item Two](/item-two) // highlight-line\\n  - [Item Three](/item-three) // highlight-line\\n- [About](/about)\\n- [Contact](/contact)\\n\")), mdx(\"h2\", null, \"Add mega menu\"), mdx(\"p\", null, \"To create a mega menu, use a block as a dropdown.\"), mdx(\"p\", null, \"Create a block in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/blocks/example-nav-block.mdx\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=content/blocks/example-nav-block.mdx\",\n    \"title\": \"content/blocks/example-nav-block.mdx\"\n  }), \"<Div>\\n  <Grid p=\\\"4\\\" col=\\\"1fr 1fr\\\" w=\\\"460px\\\" gap=\\\"10\\\">\\n    <Div>\\n      <H4 my=\\\"0\\\" fontSize=\\\"md\\\">\\n        Section One\\n      </H4>\\n      <P mt=\\\"2\\\" mb=\\\"0\\\" fontSize=\\\"sm\\\">\\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\\n        totam sit aliquid.\\n      </P>\\n    </Div>\\n    <Div>\\n      <H4 my=\\\"0\\\" fontSize=\\\"md\\\">\\n        Section One\\n      </H4>\\n      <P mt=\\\"2\\\" mb=\\\"0\\\" fontSize=\\\"sm\\\">\\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\\n        totam sit aliquid.\\n      </P>\\n    </Div>\\n  </Grid>\\n  <Flexbox bg=\\\"muted\\\" px=\\\"2\\\" py=\\\"2\\\">\\n    <Button variant=\\\"link sm\\\">\\n      Learn more\\n      <Icon name=\\\"arrow-right\\\" ml=\\\"2\\\" size=\\\"4\\\" lineHeight=\\\"1\\\" />\\n    </Button>\\n  </Flexbox>\\n</Div>\\n\")), mdx(\"p\", null, \"Next, add this block to your nav.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\",\n    \"metastring\": \"title=content/navs/example.mdx\",\n    \"title\": \"content/navs/example.mdx\"\n  }), \"- [Home](/)\\n- [About](/about)\\n- Dropdown\\n  - [Item One](/item-one)\\n  - [Item Two](/item-two)\\n  - [Item Three](/item-three)\\n- Mega menu // highlight-line\\n  - <Block src=\\\"example-nav-block\\\" /> // highlight-line\\n- [Contact](/contact)\\n\")), mdx(\"h2\", null, \"useNav\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useNav\"), \" hook can be used to retrieve and filter navs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=blocks/main-nav.mdx\",\n    \"title\": \"blocks/main-nav.mdx\"\n  }), \"import { useNav } from \\\"@reflexjs/gatsby-theme-nav\\\"\\n\\nexport const MainNav = () => {\\n  const [main] = useNav(\\\"main\\\")\\n  return main.items ? (\\n    <Ul>\\n      {main.items.map(({ value, url, items }, index) => (\\n        <Li key={index}>\\n          <Link href={url}>{value}</Link>\\n        </Li>\\n      ))}\\n    </Ul>\\n  ) : null\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#add-a-nav","title":"Add a nav"},{"url":"#rendering-navs","title":"Rendering navs"},{"url":"#add-dropdown","title":"Add dropdown"},{"url":"#add-mega-menu","title":"Add mega menu"},{"url":"#usenav","title":"useNav"}],"timeToRead":1,"data":{"title":"Navs","excerpt":"Use navs to build header, footer and other navigation menus using mdx files.","rawBody":"---\ntitle: Navs\nexcerpt: Use navs to build header, footer and other navigation menus using mdx files.\n---\n\n## Add a nav\n\nTo add a nav, simply create an `.mdx` file in the `/content/navs` directory.\n\nNavs uses using simple lists of links.\n\n```md title=content/navs/main.mdx\n- [Home](/home)\n- [Blocks](/blocks)\n  - [Headers](/blocks/headers)\n  - [Hero](/blocks/hero)\n  - [Footers](/blocks/footers)\n- [Docs](/docs)\n  - [Components](/docs/components)\n  - [Images](/docs/images)\n```\n\n## Rendering navs\n\nOnce your nav has been created, you can use the `NavMenu` component to render the nav.\n\n```jsx title=content/blocks/header.mdx\n<NavMenu name=\"example\" />\n```\n\n## Add dropdown\n\nAdd a dropdown by using a nested list.\n\n```mdx title=content/navs/example.mdx\n- [Home](/)\n- Dropdown // highlight-line\n  - [Item One](/item-one) // highlight-line\n  - [Item Two](/item-two) // highlight-line\n  - [Item Three](/item-three) // highlight-line\n- [About](/about)\n- [Contact](/contact)\n```\n\n## Add mega menu\n\nTo create a mega menu, use a block as a dropdown.\n\nCreate a block in `content/blocks/example-nav-block.mdx`\n\n```jsx title=content/blocks/example-nav-block.mdx\n<Div>\n  <Grid p=\"4\" col=\"1fr 1fr\" w=\"460px\" gap=\"10\">\n    <Div>\n      <H4 my=\"0\" fontSize=\"md\">\n        Section One\n      </H4>\n      <P mt=\"2\" mb=\"0\" fontSize=\"sm\">\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\n        totam sit aliquid.\n      </P>\n    </Div>\n    <Div>\n      <H4 my=\"0\" fontSize=\"md\">\n        Section One\n      </H4>\n      <P mt=\"2\" mb=\"0\" fontSize=\"sm\">\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\n        totam sit aliquid.\n      </P>\n    </Div>\n  </Grid>\n  <Flexbox bg=\"muted\" px=\"2\" py=\"2\">\n    <Button variant=\"link sm\">\n      Learn more\n      <Icon name=\"arrow-right\" ml=\"2\" size=\"4\" lineHeight=\"1\" />\n    </Button>\n  </Flexbox>\n</Div>\n```\n\nNext, add this block to your nav.\n\n```mdx title=content/navs/example.mdx\n- [Home](/)\n- [About](/about)\n- Dropdown\n  - [Item One](/item-one)\n  - [Item Two](/item-two)\n  - [Item Three](/item-three)\n- Mega menu // highlight-line\n  - <Block src=\"example-nav-block\" /> // highlight-line\n- [Contact](/contact)\n```\n\n## useNav\n\nThe `useNav` hook can be used to retrieve and filter navs.\n\n```jsx title=blocks/main-nav.mdx\nimport { useNav } from \"@reflexjs/gatsby-theme-nav\"\n\nexport const MainNav = () => {\n  const [main] = useNav(\"main\")\n  return main.items ? (\n    <Ul>\n      {main.items.map(({ value, url, items }, index) => (\n        <Li key={index}>\n          <Link href={url}>{value}</Link>\n        </Li>\n      ))}\n    </Ul>\n  ) : null\n}\n```\n"}},"prev":{"__typename":"MdxDoc","id":"5e52756e-ee44-5e93-bf0b-ce94efc876c8","title":"Blocks","slug":"/docs/blocks","excerpt":"Group components together in a block and use them on pages.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Blocks\",\n  \"excerpt\": \"Group components together in a block and use them on pages.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Add a block\"), mdx(\"p\", null, \"To add a block, simply create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/content/blocks\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mysite\\n  \\u2514\\u2500\\u2500 content\\n    \\u2514\\u2500\\u2500 blocks\\n      \\u2514\\u2500\\u2500 card.mdx // highlight-line\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/blocks/card.mdx\",\n    \"title\": \"content/blocks/card.mdx\"\n  }), \"<Div borderWidth=\\\"1px\\\" rounded=\\\"5px\\\">\\n  <Image src=\\\"placeholder.jpg\\\" />\\n  <Div p=\\\"6\\\">\\n    <H4 my=\\\"0\\\">Heading</H4>\\n    <P mb=\\\"0\\\">This is some text.</P>\\n  </Div>\\n</Div>\\n\")), mdx(\"h2\", null, \"Using blocks\"), mdx(\"p\", null, \"To use a block on a page, add the block using the block name.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\"\n  }), \"// This will display the block at content/blocks/card.mdx\\n\\n<Block src=\\\"card\\\" />\\n\")), mdx(\"h2\", null, \"Styling blocks\"), mdx(\"p\", null, \"Blocks can be styled like any other component. Simply pass the style as props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Block src=\\\"card\\\" bg=\\\"primary\\\" color=\\\"white\\\" />\\n\")), mdx(\"h2\", null, \"Dynamic blocks\"), mdx(\"p\", null, \"Blocks can accept props and this makes blocks really powerful.\"), mdx(\"p\", null, \"Wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"card\"), \" block we created in a named export.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const Card = ({ heading, text, image }) => (\\n  <Div borderWidth=\\\"1px\\\" rounded=\\\"5px\\\">\\n    <Image src={image} />\\n    <Div p=\\\"6\\\">\\n      <H4 my=\\\"0\\\">{heading}</H4>\\n      <P mb=\\\"0\\\">{text}</P>\\n    </Div>\\n  </Div>\\n)\\n\")), mdx(\"h5\", null, \"Using props with blocks\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid col=\\\"2\\\" gap=\\\"4\\\">\\n  <Block src=\\\"card\\\" heading=\\\"Heading One\\\" text=\\\"This is the card one.\\\" />\\n  <Block src=\\\"card\\\" heading=\\\"Heading One\\\" text=\\\"This is the card two.\\\" />\\n</Grid>\\n\")), mdx(\"h2\", null, \"useBlock\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useBlock\"), \" hook can be used to retrieve and filter blocks.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { useBlock } from \\\"@reflexjs/gatsby-theme-block\\\"\\n\\n// Returns the block from /content/blocks/branding.\\nconst [branding] = useBlock(\\\"branding\\\")\\n\\n// Returns the block from /content/blocks/shared/bio.\\nconst [bio] = useBlock(\\\"shared/bio\\\")\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#add-a-block","title":"Add a block"},{"url":"#using-blocks","title":"Using blocks"},{"url":"#styling-blocks","title":"Styling blocks"},{"url":"#dynamic-blocks","title":"Dynamic blocks","items":[{"items":[{"items":[{"url":"#using-props-with-blocks","title":"Using props with blocks"}]}]}]},{"url":"#useblock","title":"useBlock"}],"timeToRead":1,"data":{"title":"Blocks","excerpt":"Group components together in a block and use them on pages.","rawBody":"---\ntitle: Blocks\nexcerpt: Group components together in a block and use them on pages.\n---\n\n## Add a block\n\nTo add a block, simply create an `.mdx` file in the `/content/blocks` directory.\n\n```\nmysite\n  └── content\n    └── blocks\n      └── card.mdx // highlight-line\n```\n\n```md title=content/blocks/card.mdx\n<Div borderWidth=\"1px\" rounded=\"5px\">\n  <Image src=\"placeholder.jpg\" />\n  <Div p=\"6\">\n    <H4 my=\"0\">Heading</H4>\n    <P mb=\"0\">This is some text.</P>\n  </Div>\n</Div>\n```\n\n## Using blocks\n\nTo use a block on a page, add the block using the block name.\n\n```mdx\n// This will display the block at content/blocks/card.mdx\n\n<Block src=\"card\" />\n```\n\n## Styling blocks\n\nBlocks can be styled like any other component. Simply pass the style as props.\n\n```jsx\n<Block src=\"card\" bg=\"primary\" color=\"white\" />\n```\n\n## Dynamic blocks\n\nBlocks can accept props and this makes blocks really powerful.\n\nWrap the `card` block we created in a named export.\n\n```jsx\nexport const Card = ({ heading, text, image }) => (\n  <Div borderWidth=\"1px\" rounded=\"5px\">\n    <Image src={image} />\n    <Div p=\"6\">\n      <H4 my=\"0\">{heading}</H4>\n      <P mb=\"0\">{text}</P>\n    </Div>\n  </Div>\n)\n```\n\n##### Using props with blocks\n\n```jsx\n<Grid col=\"2\" gap=\"4\">\n  <Block src=\"card\" heading=\"Heading One\" text=\"This is the card one.\" />\n  <Block src=\"card\" heading=\"Heading One\" text=\"This is the card two.\" />\n</Grid>\n```\n\n## useBlock\n\nThe `useBlock` hook can be used to retrieve and filter blocks.\n\n```jsx\nimport { useBlock } from \"@reflexjs/gatsby-theme-block\"\n\n// Returns the block from /content/blocks/branding.\nconst [branding] = useBlock(\"branding\")\n\n// Returns the block from /content/blocks/shared/bio.\nconst [bio] = useBlock(\"shared/bio\")\n```\n"}},"next":{"__typename":"MdxDoc","id":"0544563c-3bc9-5c99-bcb4-c7c776d9475e","title":"Images","slug":"/docs/images","excerpt":"Handling local and remote images in Reflex.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Images\",\n  \"excerpt\": \"Handling local and remote images in Reflex.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Callout = makeShortcode(\"Callout\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Local images\"), mdx(\"p\", null, \"To use and reference images in your content, place your images in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/images\"), \" directory.\"), mdx(\"p\", null, \"Then reference the image using its path.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"name-of-image.png\\\" alt=\\\"An image\\\" />\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component is a wrapper around Gatsby Image. You can learn more about Gatsby image \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/packages/gatsby-image/\"\n  }), \"here\"), \".\"), mdx(\"h2\", null, \"Remote images\"), mdx(\"p\", null, \"Remote images can be used the same way.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"https://example.com/image.png\\\" alt=\\\"External image\\\" />\\n\")), mdx(Callout, {\n    level: \"secondary\",\n    mdxType: \"Callout\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": Due to a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/issues/19785\"\n  }), \"bug\"), \" with gatsby-remark-images\\nand mdx, we are using a workaround for images. We'll fix this once the bug is resolved.\")), mdx(\"h2\", null, \"Aspect ratio\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component has support for aspect ratio using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aspectRatio\"), \" prop:\"), mdx(\"h3\", null, \"4/3\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"placeholder.jpg\\\" aspectRatio={4 / 3} />\\n\")), mdx(Image, {\n    src: \"placeholder.jpg\",\n    aspectRatio: 4 / 3,\n    maxW: \"50%\",\n    mdxType: \"Image\"\n  }), mdx(\"h3\", null, \"16/8\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"placeholder.jpg\\\" aspectRatio={16 / 8} />\\n\")), mdx(Image, {\n    src: \"placeholder.jpg\",\n    aspectRatio: 16 / 8,\n    maxW: \"50%\",\n    mdxType: \"Image\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#local-images","title":"Local images"},{"url":"#remote-images","title":"Remote images"},{"url":"#aspect-ratio","title":"Aspect ratio","items":[{"url":"#43","title":"4/3"},{"url":"#168","title":"16/8"}]}],"timeToRead":1,"data":{"title":"Images","excerpt":"Handling local and remote images in Reflex.","rawBody":"---\ntitle: Images\nexcerpt: Handling local and remote images in Reflex.\n---\n\n## Local images\n\nTo use and reference images in your content, place your images in the `content/images` directory.\n\nThen reference the image using its path.\n\n```jsx\n<Image src=\"name-of-image.png\" alt=\"An image\" />\n```\n\nThe `Image` component is a wrapper around Gatsby Image. You can learn more about Gatsby image [here](https://www.gatsbyjs.org/packages/gatsby-image/).\n\n## Remote images\n\nRemote images can be used the same way.\n\n```jsx\n<Image src=\"https://example.com/image.png\" alt=\"External image\" />\n```\n\n<Callout level=\"secondary\">\n\n**Note**: Due to a [bug](https://github.com/gatsbyjs/gatsby/issues/19785) with gatsby-remark-images\nand mdx, we are using a workaround for images. We'll fix this once the bug is resolved.\n\n</Callout>\n\n## Aspect ratio\n\nThe `Image` component has support for aspect ratio using the `aspectRatio` prop:\n\n### 4/3\n\n```jsx\n<Image src=\"placeholder.jpg\" aspectRatio={4 / 3} />\n```\n\n<Image src=\"placeholder.jpg\" aspectRatio={4 / 3} maxW=\"50%\" />\n\n### 16/8\n\n```jsx\n<Image src=\"placeholder.jpg\" aspectRatio={16 / 8} />\n```\n\n<Image src=\"placeholder.jpg\" aspectRatio={16 / 8} maxW=\"50%\" />\n"}}},"pageContext":{"id":"ab0e55c3-c23a-53f7-8020-8476c500e988","prev":"5e52756e-ee44-5e93-bf0b-ce94efc876c8","next":"0544563c-3bc9-5c99-bcb4-c7c776d9475e"}},"staticQueryHashes":["2206637893","2206637893","2723618800","2723618800","2877882650","2877882650","3223469662","3223469662","3699512716","3699512716","4071972417","4071972417"]}