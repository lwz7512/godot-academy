{"componentChunkName":"component---node-modules-reflexjs-gatsby-theme-doc-src-doc-template-js","path":"/docs/theming-styling","result":{"data":{"doc":{"__typename":"MdxDoc","id":"5bfd02e5-98ed-5503-b556-e88c54f7ecf8","title":"Styling","slug":"/docs/theming-styling","excerpt":"Theme your site using style props.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Styling\",\n  \"excerpt\": \"Theme your site using style props.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Styling components in Reflex is as easy as adding attributes to the component, just like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button bg=\\\"primary\\\" color=\\\"text\\\" px=\\\"3\\\" py=\\\"2\\\">\\n  Button\\n</Button>\\n\\n<P fontSize=\\\"2\\\" fontWeight=\\\"semi\\\">\\n  This is a paragraph\\n</P>\\n\\n<Grid col=\\\"1fr 1fr\\\" gap=\\\"2\\\">\\n  <Div>First column</Div>\\n  <Div>Second column</Div>\\n</Grid>\\n\")), mdx(\"h2\", null, \"Responsive\"), mdx(\"p\", null, \"Define your breakpoints in your theme file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflex/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflex/gatsby-theme-base/theme.js\"\n  }), \"export default {\\n  ...\\n  breakpoints: [`768px`, `1024px`, `1280px`],\\n  ...\\n}\\n\")), mdx(\"p\", null, \"Then use a pipe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|\"), \" for mobile-first responsive styles.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// A one column grid for mobile and two column for larger breakpoints.\\n<Grid col=\\\"1fr|1fr 1fr\\\">\\n  <Div>First</Div>\\n  <Div>Second</Div>\\n</Grid>\\n\\n// Different font sizes and colors.\\n<Button fontSize=\\\"sm|lg\\\" colors=\\\"primary|secondary\\\">\\n  Button\\n</Button>\\n\")), mdx(\"h2\", null, \"Hover and focus\"), mdx(\"p\", null, \"Hover, focus and other CSS pseudo-classes have equivalent style props by using a prefix. Examples: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hoverBg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hoverColor\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hoverBorderColor\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button bg=\\\"primary\\\" hoverBg=\\\"secondary\\\" focusBorderWidth=\\\"1px\\\">\\n  Button\\n</Button>\\n\")), mdx(\"h2\", null, \"Variants\"), mdx(\"p\", null, \"If you find yourself repeating common styles for the same components, you can abstract the styles into a variant.\"), mdx(\"p\", null, \"Every component has support for variants. See example below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflex/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflex/gatsby-theme-base/theme.js\"\n  }), \"export default {\\n  ...\\n  colors: {\\n    text: \\\"#000\\\",\\n    background: \\\"#fff\\\",\\n    primary: \\\"#2a9d8f\\\",\\n    secondary: \\\"#e76f51\\\",\\n  },\\n  // highlight-start\\n  button: {\\n    // All buttons.\\n    border: \\\"1px solid\\\",\\n    borderRadius: \\\"sm\\\",\\n    fontSize: \\\"md\\\",\\n\\n    // Primary button.\\n    primary: {\\n      bg: \\\"primary\\\",\\n    },\\n\\n    // Secondary button.\\n    secondary: {\\n      bg: \\\"secondary\\\",\\n    },\\n\\n    // lg button.\\n    lg: {\\n      fontSize: \\\"2xl\\\",\\n    }\\n  }\\n  // highlight-end\\n}\\n\")), mdx(\"p\", null, \"To use variant, simply pass in values to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button variant=\\\"primary\\\">Primary button</Button>\\n\")), mdx(\"p\", null, \"You can also use multiple variants.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button variant=\\\"primary lg\\\">Large Primary button</Button>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#responsive","title":"Responsive"},{"url":"#hover-and-focus","title":"Hover and focus"},{"url":"#variants","title":"Variants"}],"timeToRead":1,"data":{"title":"Styling","excerpt":"Theme your site using style props.","rawBody":"---\ntitle: Styling\nexcerpt: Theme your site using style props.\n---\n\nStyling components in Reflex is as easy as adding attributes to the component, just like `HTML`.\n\n```jsx\n<Button bg=\"primary\" color=\"text\" px=\"3\" py=\"2\">\n  Button\n</Button>\n\n<P fontSize=\"2\" fontWeight=\"semi\">\n  This is a paragraph\n</P>\n\n<Grid col=\"1fr 1fr\" gap=\"2\">\n  <Div>First column</Div>\n  <Div>Second column</Div>\n</Grid>\n```\n\n## Responsive\n\nDefine your breakpoints in your theme file:\n\n```js title=src/@reflex/gatsby-theme-base/theme.js\nexport default {\n  ...\n  breakpoints: [`768px`, `1024px`, `1280px`],\n  ...\n}\n```\n\nThen use a pipe `|` for mobile-first responsive styles.\n\n```jsx\n// A one column grid for mobile and two column for larger breakpoints.\n<Grid col=\"1fr|1fr 1fr\">\n  <Div>First</Div>\n  <Div>Second</Div>\n</Grid>\n\n// Different font sizes and colors.\n<Button fontSize=\"sm|lg\" colors=\"primary|secondary\">\n  Button\n</Button>\n```\n\n## Hover and focus\n\nHover, focus and other CSS pseudo-classes have equivalent style props by using a prefix. Examples: `hoverBg`, `hoverColor`, and `hoverBorderColor`.\n\n```jsx\n<Button bg=\"primary\" hoverBg=\"secondary\" focusBorderWidth=\"1px\">\n  Button\n</Button>\n```\n\n## Variants\n\nIf you find yourself repeating common styles for the same components, you can abstract the styles into a variant.\n\nEvery component has support for variants. See example below:\n\n```js title=src/@reflex/gatsby-theme-base/theme.js\nexport default {\n  ...\n  colors: {\n    text: \"#000\",\n    background: \"#fff\",\n    primary: \"#2a9d8f\",\n    secondary: \"#e76f51\",\n  },\n  // highlight-start\n  button: {\n    // All buttons.\n    border: \"1px solid\",\n    borderRadius: \"sm\",\n    fontSize: \"md\",\n\n    // Primary button.\n    primary: {\n      bg: \"primary\",\n    },\n\n    // Secondary button.\n    secondary: {\n      bg: \"secondary\",\n    },\n\n    // lg button.\n    lg: {\n      fontSize: \"2xl\",\n    }\n  }\n  // highlight-end\n}\n```\n\nTo use variant, simply pass in values to the `variant` prop.\n\n```jsx\n<Button variant=\"primary\">Primary button</Button>\n```\n\nYou can also use multiple variants.\n\n```jsx\n<Button variant=\"primary lg\">Large Primary button</Button>\n```\n"}},"prev":{"__typename":"MdxDoc","id":"841da6e8-d304-5c40-b8c6-9a389f61a4ef","title":"Theming","slug":"/docs/theming-create-theme","excerpt":"Let's start by creating a simple theme.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Theming\",\n  \"excerpt\": \"Let's start by creating a simple theme.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Create the following file in your site: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/@reflexjs/gatsby-theme-base/theme.js\"), \". This is where you are going\\nto define your theme values.\"), mdx(\"p\", null, \"Next, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby clean && gatsby develop\"), \" to clear caches and restart the development server.\"), mdx(\"p\", null, \"We are going to start with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base\"), \" preset and add custom some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colors\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSizes\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lineHeights\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflex/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflex/gatsby-theme-base/theme.js\"\n  }), \"export default {\\n  preset: base, // highlight-line\\n  colors: {\\n    text: \\\"#000\\\",\\n    background: \\\"#fff\\\",\\n    primary: \\\"#2a9d8f\\\",\\n    secondary: \\\"#e76f51\\\",\\n  },\\n  fonts: {\\n    body: '\\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", sans-serif',\\n    heading: \\\"Georgia, serif\\\",\\n    monospace: \\\"Menlo, monospace\\\",\\n  },\\n}\\n\")), mdx(\"h2\", null, \"Styling\"), mdx(\"p\", null, \"Once you have created your theme, you can now use the theme values in any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<H1 fontFamily=\\\"heading\\\" color=\\\"primary\\\">\\n  This is heading\\n</H1>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#styling","title":"Styling"}],"timeToRead":1,"data":{"title":"Theming","excerpt":"Let's start by creating a simple theme.","rawBody":"---\ntitle: Theming\nexcerpt: Let's start by creating a simple theme.\n---\n\nCreate the following file in your site: `src/@reflexjs/gatsby-theme-base/theme.js`. This is where you are going\nto define your theme values.\n\nNext, run `gatsby clean && gatsby develop` to clear caches and restart the development server.\n\nWe are going to start with the `base` preset and add custom some `colors`, `fontSizes` and `lineHeights`.\n\n```js title=src/@reflex/gatsby-theme-base/theme.js\nexport default {\n  preset: base, // highlight-line\n  colors: {\n    text: \"#000\",\n    background: \"#fff\",\n    primary: \"#2a9d8f\",\n    secondary: \"#e76f51\",\n  },\n  fonts: {\n    body: '\"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif',\n    heading: \"Georgia, serif\",\n    monospace: \"Menlo, monospace\",\n  },\n}\n```\n\n## Styling\n\nOnce you have created your theme, you can now use the theme values in any `.mdx` or `React` component.\n\n```jsx\n<H1 fontFamily=\"heading\" color=\"primary\">\n  This is heading\n</H1>\n```\n"}},"next":{"__typename":"MdxDoc","id":"f5d61113-53e9-5ac3-9a04-4501d865850f","title":"Presets","slug":"/docs/theming-presets","excerpt":"Reflex includes a few presets you can use as starting point for your themes.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Presets\",\n  \"excerpt\": \"Reflex includes a few presets you can use as starting point for your themes.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can see presets in action in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/library\"\n  }), \"Blocks library\"), \".\"), mdx(Image, {\n    src: \"reflex-blocks-library-screenshot.jpg\",\n    mdxType: \"Image\"\n  }), mdx(\"h2\", null, \"Base\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @reflexjs/preset-base typeface-inter\\n\")), mdx(\"h3\", null, \"Extend base\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflexjs/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflexjs/gatsby-theme-base/theme.js\"\n  }), \"import typeface-inter\\nimport base from \\\"@reflexjs/preset-base\\\"\\n\\nexport default {\\n  preset: base,\\n  // Overrides.\\n  colors: {\\n    primary: `purple`,\\n  },\\n}\\n\")), mdx(\"h2\", null, \"Flex\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @reflexjs/preset-flex typeface-open-sans typeface-prata\\n\")), mdx(\"h3\", null, \"Extend flex\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflexjs/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflexjs/gatsby-theme-base/theme.js\"\n  }), \"import typeface-open-sans\\nimport typeface-prata\\nimport flex from \\\"@reflexjs/preset-flex\\\"\\n\\nexport default {\\n  preset: flex,\\n  // Overrides.\\n  colors: {\\n    primary: `#09f`,\\n  },\\n}\\n\")), mdx(\"p\", null, \"You can also use any \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/packages/presets\"\n  }), \"Theme UI presets\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#base","title":"Base","items":[{"url":"#extend-base","title":"Extend base"}]},{"url":"#flex","title":"Flex","items":[{"url":"#extend-flex","title":"Extend flex"}]}],"timeToRead":1,"data":{"title":"Presets","excerpt":"Reflex includes a few presets you can use as starting point for your themes.","rawBody":"---\ntitle: Presets\nexcerpt: Reflex includes a few presets you can use as starting point for your themes.\n---\n\nYou can see presets in action in the [Blocks library](/library).\n\n<Image src=\"reflex-blocks-library-screenshot.jpg\" />\n\n## Base\n\n```sh\nnpm i @reflexjs/preset-base typeface-inter\n```\n\n### Extend base\n\n```js title=src/@reflexjs/gatsby-theme-base/theme.js\nimport typeface-inter\nimport base from \"@reflexjs/preset-base\"\n\nexport default {\n  preset: base,\n  // Overrides.\n  colors: {\n    primary: `purple`,\n  },\n}\n```\n\n## Flex\n\n```sh\nnpm i @reflexjs/preset-flex typeface-open-sans typeface-prata\n```\n\n### Extend flex\n\n```js title=src/@reflexjs/gatsby-theme-base/theme.js\nimport typeface-open-sans\nimport typeface-prata\nimport flex from \"@reflexjs/preset-flex\"\n\nexport default {\n  preset: flex,\n  // Overrides.\n  colors: {\n    primary: `#09f`,\n  },\n}\n```\n\nYou can also use any [Theme UI presets](https://theme-ui.com/packages/presets).\n"}}},"pageContext":{"id":"5bfd02e5-98ed-5503-b556-e88c54f7ecf8","prev":"841da6e8-d304-5c40-b8c6-9a389f61a4ef","next":"f5d61113-53e9-5ac3-9a04-4501d865850f"}},"staticQueryHashes":["2206637893","2206637893","2723618800","2723618800","2877882650","2877882650","3223469662","3223469662","3699512716","3699512716","4071972417","4071972417"]}