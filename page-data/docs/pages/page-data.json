{"componentChunkName":"component---node-modules-reflexjs-gatsby-theme-doc-src-doc-template-js","path":"/docs/pages","result":{"data":{"doc":{"__typename":"MdxDoc","id":"e3d7371a-4aa0-55d6-902a-32ecd6cb8757","title":"Build a landing page","slug":"/docs/pages","excerpt":"Learn how to build a landing page using blocks.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Build a landing page\",\n  \"excerpt\": \"Learn how to build a landing page using blocks.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Callout = makeShortcode(\"Callout\");\nvar Strong = makeShortcode(\"Strong\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Reflex ships with a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Page\"), \" type. You can use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"page\"), \" to create a simple\\ntext-based page or a complex landing page with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/components\"\n  }), \"components\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/blocks\"\n  }), \"blocks\"), \".\"), mdx(\"h2\", null, \"Add a page\"), mdx(\"p\", null, \"To add a page, create a file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/pages\"), \" directory. Example: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/pages/about.mdx\"), \".\"), mdx(Callout, {\n    my: \"8\",\n    mdxType: \"Callout\"\n  }, \"You can use either \", mdx(Strong, {\n    mdxType: \"Strong\"\n  }, \".mdx\"), \" or \", mdx(Strong, {\n    mdxType: \"Strong\"\n  }, \".md\"), \" file extension. They both work.\"), mdx(\"p\", null, \"A basic page looks like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/pages/about.mdx\",\n    \"title\": \"content/pages/about.mdx\"\n  }), \"---\\ntitle: Welcome to Reflex\\nexcerpt: Description for this page. This is mostly used for the description meta tag.\\n---\\n\\n# Add your content here.\\n\")), mdx(\"p\", null, \"On save, Gatsby will automatically create a new page for you at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/about\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#add-a-page","title":"Add a page"}],"timeToRead":1,"data":{"title":"Build a landing page","excerpt":"Learn how to build a landing page using blocks.","rawBody":"---\ntitle: Build a landing page\nexcerpt: Learn how to build a landing page using blocks.\n---\n\nReflex ships with a **Page** type. You can use a **page** to create a simple\ntext-based page or a complex landing page with [components](/docs/components) and [blocks](/docs/blocks).\n\n## Add a page\n\nTo add a page, create a file in the `content/pages` directory. Example: `content/pages/about.mdx`.\n\n<Callout my=\"8\">\n  You can use either <Strong>.mdx</Strong> or <Strong>.md</Strong> file\n  extension. They both work.\n</Callout>\n\nA basic page looks like this.\n\n```md title=content/pages/about.mdx\n---\ntitle: Welcome to Reflex\nexcerpt: Description for this page. This is mostly used for the description meta tag.\n---\n\n# Add your content here.\n```\n\nOn save, Gatsby will automatically create a new page for you at `/about`.\n"}},"prev":{"__typename":"MdxDoc","id":"b49d8145-caa1-5f7f-8f2f-e94455d88387","title":"MDX","slug":"/docs/mdx","excerpt":"MDX is the Markdown format extended to allows JSX components.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MDX\",\n  \"excerpt\": \"MDX is the Markdown format extended to allows JSX components.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Reflex uses MDX for content. Pages, blocks, posts, and navs are all built using MDX. You can import components, such as blocks, and embed them within your content.\"), mdx(\"h2\", null, \"Components\"), mdx(\"p\", null, \"Components can be imported or written inline with your Markdown content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"---\\ntitle: A page\\n---\\n\\nimport { Example } from \\\"package\\\" // highlight-line\\n\\n# Heading 1\\n\\nA paragraph officiis labore excepturi nam.\\n\\n<Block src=\\\"hero\\\" /> // highlight-line\\n\\nAnother paragraph.\\n\\n<Button>A button</Button> component.\\n\")), mdx(\"h2\", null, \"Styling\"), mdx(\"p\", null, \"Components in MDX files can be styled using style props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"---\\ntitle: A page\\n---\\n\\n<P color=\\\"primary\\\">A paragraph in primary color</P>\\n\\n<H3 mb=\\\"4\\\">A heading with margin bottom</H3>\\n\")), mdx(\"p\", null, \"See the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/theme\"\n  }), \"Theme reference\"), \" for style props values.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#components","title":"Components"},{"url":"#styling","title":"Styling"}],"timeToRead":1,"data":{"title":"MDX","excerpt":"MDX is the Markdown format extended to allows JSX components.","rawBody":"---\ntitle: MDX\nexcerpt: MDX is the Markdown format extended to allows JSX components.\n---\n\nReflex uses MDX for content. Pages, blocks, posts, and navs are all built using MDX. You can import components, such as blocks, and embed them within your content.\n\n## Components\n\nComponents can be imported or written inline with your Markdown content.\n\n```jsx\n---\ntitle: A page\n---\n\nimport { Example } from \"package\" // highlight-line\n\n# Heading 1\n\nA paragraph officiis labore excepturi nam.\n\n<Block src=\"hero\" /> // highlight-line\n\nAnother paragraph.\n\n<Button>A button</Button> component.\n```\n\n## Styling\n\nComponents in MDX files can be styled using style props.\n\n```jsx\n---\ntitle: A page\n---\n\n<P color=\"primary\">A paragraph in primary color</P>\n\n<H3 mb=\"4\">A heading with margin bottom</H3>\n```\n\nSee the [Theme reference](/theme) for style props values.\n"}},"next":{"__typename":"MdxDoc","id":"69d9414d-1b21-5658-9c56-153ed84a49d1","title":"Add a hero","slug":"/docs/pages-hero","excerpt":"Let's start by adding a hero to the page.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Add a hero\",\n  \"excerpt\": \"Let's start by adding a hero to the page.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Div = makeShortcode(\"Div\");\nvar Span = makeShortcode(\"Span\");\nvar Section = makeShortcode(\"Section\");\nvar Container = makeShortcode(\"Container\");\nvar H1 = makeShortcode(\"H1\");\nvar P = makeShortcode(\"P\");\nvar Image = makeShortcode(\"Image\");\nvar Callout = makeShortcode(\"Callout\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are going to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/components\"\n  }), \"components\"), \" to build the hero.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/pages/about.mdx\",\n    \"title\": \"content/pages/about.mdx\"\n  }), \"---\\ntitle: Welcome to Reflex\\nexcerpt: Description for this page. This is mostly used for the description meta tag.\\n---\\n\\n// highlight-start\\n\\n<Section>\\n  <Container>\\n    <H1>Welcome to my site</H1>\\n    <P>This is the a short description for the page</P>\\n    <Image src=\\\"placeholder.jpg\\\" />\\n  </Container>\\n</Section>\\n\\n// highlight-end\\n\")), mdx(\"p\", null, \"This will render a hero as shown below:\"), mdx(Div, {\n    borderWidth: \"1px\",\n    mdxType: \"Div\"\n  }, mdx(Span, {\n    d: \"block\",\n    p: \"4\",\n    color: \"borderHover\",\n    mdxType: \"Span\"\n  }, \"Preview\"), mdx(Section, {\n    mdxType: \"Section\"\n  }, mdx(Container, {\n    mdxType: \"Container\"\n  }, mdx(H1, {\n    mdxType: \"H1\"\n  }, \"Welcome to my site\"), mdx(P, {\n    mdxType: \"P\"\n  }, \"This is the a short description for the page\"), mdx(Image, {\n    src: \"placeholder.jpg\",\n    mdxType: \"Image\"\n  })))), mdx(Callout, {\n    my: \"8\",\n    pt: \"0\",\n    pb: \"2\",\n    mdxType: \"Callout\"\n  }, mdx(\"p\", null, \"Place the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"placeholder.jpg\"), \" image file inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/content/images\"), \" directory.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"timeToRead":1,"data":{"title":"Add a hero","excerpt":"Let's start by adding a hero to the page.","rawBody":"---\ntitle: Add a hero\nexcerpt: Let's start by adding a hero to the page.\n---\n\nWe are going to use [components](/docs/components) to build the hero.\n\n```md title=content/pages/about.mdx\n---\ntitle: Welcome to Reflex\nexcerpt: Description for this page. This is mostly used for the description meta tag.\n---\n\n// highlight-start\n\n<Section>\n  <Container>\n    <H1>Welcome to my site</H1>\n    <P>This is the a short description for the page</P>\n    <Image src=\"placeholder.jpg\" />\n  </Container>\n</Section>\n\n// highlight-end\n```\n\nThis will render a hero as shown below:\n\n<Div borderWidth=\"1px\">\n  <Span d=\"block\" p=\"4\" color=\"borderHover\">\n    Preview\n  </Span>\n  <Section>\n    <Container>\n      <H1>Welcome to my site</H1>\n      <P>This is the a short description for the page</P>\n      <Image src=\"placeholder.jpg\" />\n    </Container>\n  </Section>\n</Div>\n\n<Callout my=\"8\" pt=\"0\" pb=\"2\">\n\nPlace the _placeholder.jpg_ image file inside the `/content/images` directory.\n\n</Callout>\n"}}},"pageContext":{"id":"e3d7371a-4aa0-55d6-902a-32ecd6cb8757","prev":"b49d8145-caa1-5f7f-8f2f-e94455d88387","next":"69d9414d-1b21-5658-9c56-153ed84a49d1"}},"staticQueryHashes":["2206637893","2206637893","2723618800","2723618800","2877882650","2877882650","3223469662","3223469662","3699512716","3699512716","4071972417","4071972417"]}