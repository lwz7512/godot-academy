{"componentChunkName":"component---node-modules-reflexjs-gatsby-theme-doc-src-doc-template-js","path":"/docs/components","result":{"data":{"doc":{"__typename":"MdxDoc","id":"66622ac3-9de6-5353-9fe9-1ca3f364af55","title":"Components","slug":"/docs/components","excerpt":"Components are one of the most important and useful features of Reflex.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Components\",\n  \"excerpt\": \"Components are one of the most important and useful features of Reflex.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar P = makeShortcode(\"P\");\nvar Button = makeShortcode(\"Button\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Installation\"), mdx(\"p\", null, \"Components are provided by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@reflexjs/components\"), \" package and is aleady included in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base\"), \" starter.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/blog/reflex-create-react-app\"\n  }), \"Learn how to use Reflex components in any React project\"), \".\"), mdx(\"h2\", null, \"What is a component?\"), mdx(\"p\", null, \"A component is a small reusable piece of content that you can use to build your site. In Reflex we have made it easy for you to build and theme components.\"), mdx(\"p\", null, \"Creating and styling component is as easy as writing HTML.\"), mdx(P, {\n    fontSize: \"xl\",\n    fontWeight: \"semibold\",\n    mdxType: \"P\"\n  }, \"If you know HTML you know how to use this.\"), mdx(\"p\", null, \"Let's take a look.\"), mdx(\"h3\", null, \"HTML to Components\"), mdx(\"p\", null, \"In HTML, to create a button you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" tag. In Reflex, you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \". In HTML, to create a heading, you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h1\"), \", in Reflex you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"H1\"), \". See what we did there?\"), mdx(\"p\", null, \"Every HTML tag has an equivalent Reflex component. We have built components for almost all HTML tags.\"), mdx(\"h2\", null, \"Build a button\"), mdx(\"p\", null, \"Start with a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \" button.\"), mdx(\"button\", null, \"A button\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<button>A button</button>\\n\")), mdx(\"p\", null, \"Let's turn this into a Reflex/React component.\"), mdx(Button, {\n    mdxType: \"Button\"\n  }, \"A button\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button>A button</Button>\\n\")), mdx(\"p\", null, \"This is a button but with power!\"), mdx(\"h2\", null, \"Style a button\"), mdx(\"p\", null, \"Styling is a easy as adding attributes to the component, just like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTML\"), \".\"), mdx(ThemeProvider, {\n    mdxType: \"ThemeProvider\"\n  }, mdx(Button, {\n    bg: \"tomato\",\n    mdxType: \"Button\"\n  }, \"A button\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button bg=\\\"tomato\\\">A button</Button>\\n\")), mdx(\"p\", null, \"Now turn this into a fancy button.\"), mdx(Button, {\n    background: \"tomato\",\n    color: \"white\",\n    px: \"4\",\n    py: \"3\",\n    fontSize: \"md\",\n    border: \"0\",\n    borderRadius: \"md\",\n    hoverBackground: \"purple\",\n    mdxType: \"Button\"\n  }, \"Fancy Button\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Button\\n  background=\\\"tomato\\\"\\n  color=\\\"white\\\"\\n  px=\\\"4\\\"\\n  py=\\\"3\\\"\\n  fontSize=\\\"md\\\"\\n  border=\\\"0\\\"\\n  borderRadius=\\\"md\\\"\\n  hoverBackground=\\\"purple\\\"\\n>\\n  Fancy Button\\n</Button>\\n\")), mdx(\"p\", null, \"That was easy. You are now ready to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/pages-style-hero\"\n  }), \"build a hero\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Grid\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Flexbox\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Container\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image\"), \" are special components we added to Reflex. You can learn more about using images \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/images\"\n  }), \"here\"), \".\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/docs/theming\"\n  }), \"Learn more about theming\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#installation","title":"Installation"},{"url":"#what-is-a-component","title":"What is a component?","items":[{"url":"#html-to-components","title":"HTML to Components"}]},{"url":"#build-a-button","title":"Build a button"},{"url":"#style-a-button","title":"Style a button"}],"timeToRead":1,"data":{"title":"Components","excerpt":"Components are one of the most important and useful features of Reflex.","rawBody":"---\ntitle: Components\nexcerpt: Components are one of the most important and useful features of Reflex.\n---\n\nimport { ThemeProvider } from \"@reflexjs/gatsby-theme-core\"\nimport { Callout } from \"@reflexjs/gatsby-theme-doc\"\n\n## Installation\n\nComponents are provided by the `@reflexjs/components` package and is aleady included in the `base` starter.\n\n[Learn how to use Reflex components in any React project](/blog/reflex-create-react-app).\n\n## What is a component?\n\nA component is a small reusable piece of content that you can use to build your site. In Reflex we have made it easy for you to build and theme components.\n\nCreating and styling component is as easy as writing HTML.\n\n<P fontSize=\"xl\" fontWeight=\"semibold\">\n  If you know HTML you know how to use this.\n</P>\n\nLet's take a look.\n\n### HTML to Components\n\nIn HTML, to create a button you use the `button` tag. In Reflex, you use `Button`. In HTML, to create a heading, you use `h1`, in Reflex you use `H1`. See what we did there?\n\nEvery HTML tag has an equivalent Reflex component. We have built components for almost all HTML tags.\n\n## Build a button\n\nStart with a simple `HTML` button.\n\n<button>A button</button>\n\n```html\n<button>A button</button>\n```\n\nLet's turn this into a Reflex/React component.\n\n<Button>A button</Button>\n\n```jsx\n<Button>A button</Button>\n```\n\nThis is a button but with power!\n\n## Style a button\n\nStyling is a easy as adding attributes to the component, just like `HTML`.\n\n<ThemeProvider>\n  <Button bg=\"tomato\">A button</Button>\n</ThemeProvider>\n\n```jsx\n<Button bg=\"tomato\">A button</Button>\n```\n\nNow turn this into a fancy button.\n\n<Button\n  background=\"tomato\"\n  color=\"white\"\n  px=\"4\"\n  py=\"3\"\n  fontSize=\"md\"\n  border=\"0\"\n  borderRadius=\"md\"\n  hoverBackground=\"purple\"\n>\n  Fancy Button\n</Button>\n\n```js\n<Button\n  background=\"tomato\"\n  color=\"white\"\n  px=\"4\"\n  py=\"3\"\n  fontSize=\"md\"\n  border=\"0\"\n  borderRadius=\"md\"\n  hoverBackground=\"purple\"\n>\n  Fancy Button\n</Button>\n```\n\nThat was easy. You are now ready to [build a hero](/docs/pages-style-hero).\n\n**Note**: _Grid_, _Flexbox_, _Container_ and _Image_ are special components we added to Reflex. You can learn more about using images [here](/docs/images).\n\n[Learn more about theming](/docs/theming).\n"}},"prev":{"__typename":"MdxDoc","id":"f5d61113-53e9-5ac3-9a04-4501d865850f","title":"Presets","slug":"/docs/theming-presets","excerpt":"Reflex includes a few presets you can use as starting point for your themes.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Presets\",\n  \"excerpt\": \"Reflex includes a few presets you can use as starting point for your themes.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can see presets in action in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/godot-academy/library\"\n  }), \"Blocks library\"), \".\"), mdx(Image, {\n    src: \"reflex-blocks-library-screenshot.jpg\",\n    mdxType: \"Image\"\n  }), mdx(\"h2\", null, \"Base\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @reflexjs/preset-base typeface-inter\\n\")), mdx(\"h3\", null, \"Extend base\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflexjs/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflexjs/gatsby-theme-base/theme.js\"\n  }), \"import typeface-inter\\nimport base from \\\"@reflexjs/preset-base\\\"\\n\\nexport default {\\n  preset: base,\\n  // Overrides.\\n  colors: {\\n    primary: `purple`,\\n  },\\n}\\n\")), mdx(\"h2\", null, \"Flex\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @reflexjs/preset-flex typeface-open-sans typeface-prata\\n\")), mdx(\"h3\", null, \"Extend flex\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/@reflexjs/gatsby-theme-base/theme.js\",\n    \"title\": \"src/@reflexjs/gatsby-theme-base/theme.js\"\n  }), \"import typeface-open-sans\\nimport typeface-prata\\nimport flex from \\\"@reflexjs/preset-flex\\\"\\n\\nexport default {\\n  preset: flex,\\n  // Overrides.\\n  colors: {\\n    primary: `#09f`,\\n  },\\n}\\n\")), mdx(\"p\", null, \"You can also use any \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/packages/presets\"\n  }), \"Theme UI presets\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#base","title":"Base","items":[{"url":"#extend-base","title":"Extend base"}]},{"url":"#flex","title":"Flex","items":[{"url":"#extend-flex","title":"Extend flex"}]}],"timeToRead":1,"data":{"title":"Presets","excerpt":"Reflex includes a few presets you can use as starting point for your themes.","rawBody":"---\ntitle: Presets\nexcerpt: Reflex includes a few presets you can use as starting point for your themes.\n---\n\nYou can see presets in action in the [Blocks library](/library).\n\n<Image src=\"reflex-blocks-library-screenshot.jpg\" />\n\n## Base\n\n```sh\nnpm i @reflexjs/preset-base typeface-inter\n```\n\n### Extend base\n\n```js title=src/@reflexjs/gatsby-theme-base/theme.js\nimport typeface-inter\nimport base from \"@reflexjs/preset-base\"\n\nexport default {\n  preset: base,\n  // Overrides.\n  colors: {\n    primary: `purple`,\n  },\n}\n```\n\n## Flex\n\n```sh\nnpm i @reflexjs/preset-flex typeface-open-sans typeface-prata\n```\n\n### Extend flex\n\n```js title=src/@reflexjs/gatsby-theme-base/theme.js\nimport typeface-open-sans\nimport typeface-prata\nimport flex from \"@reflexjs/preset-flex\"\n\nexport default {\n  preset: flex,\n  // Overrides.\n  colors: {\n    primary: `#09f`,\n  },\n}\n```\n\nYou can also use any [Theme UI presets](https://theme-ui.com/packages/presets).\n"}},"next":{"__typename":"MdxDoc","id":"5e52756e-ee44-5e93-bf0b-ce94efc876c8","title":"Blocks","slug":"/docs/blocks","excerpt":"Group components together in a block and use them on pages.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Blocks\",\n  \"excerpt\": \"Group components together in a block and use them on pages.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Add a block\"), mdx(\"p\", null, \"To add a block, simply create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/content/blocks\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mysite\\n  \\u2514\\u2500\\u2500 content\\n    \\u2514\\u2500\\u2500 blocks\\n      \\u2514\\u2500\\u2500 card.mdx // highlight-line\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/blocks/card.mdx\",\n    \"title\": \"content/blocks/card.mdx\"\n  }), \"<Div borderWidth=\\\"1px\\\" rounded=\\\"5px\\\">\\n  <Image src=\\\"placeholder.jpg\\\" />\\n  <Div p=\\\"6\\\">\\n    <H4 my=\\\"0\\\">Heading</H4>\\n    <P mb=\\\"0\\\">This is some text.</P>\\n  </Div>\\n</Div>\\n\")), mdx(\"h2\", null, \"Using blocks\"), mdx(\"p\", null, \"To use a block on a page, add the block using the block name.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\"\n  }), \"// This will display the block at content/blocks/card.mdx\\n\\n<Block src=\\\"card\\\" />\\n\")), mdx(\"h2\", null, \"Styling blocks\"), mdx(\"p\", null, \"Blocks can be styled like any other component. Simply pass the style as props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Block src=\\\"card\\\" bg=\\\"primary\\\" color=\\\"white\\\" />\\n\")), mdx(\"h2\", null, \"Dynamic blocks\"), mdx(\"p\", null, \"Blocks can accept props and this makes blocks really powerful.\"), mdx(\"p\", null, \"Wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"card\"), \" block we created in a named export.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export const Card = ({ heading, text, image }) => (\\n  <Div borderWidth=\\\"1px\\\" rounded=\\\"5px\\\">\\n    <Image src={image} />\\n    <Div p=\\\"6\\\">\\n      <H4 my=\\\"0\\\">{heading}</H4>\\n      <P mb=\\\"0\\\">{text}</P>\\n    </Div>\\n  </Div>\\n)\\n\")), mdx(\"h5\", null, \"Using props with blocks\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid col=\\\"2\\\" gap=\\\"4\\\">\\n  <Block src=\\\"card\\\" heading=\\\"Heading One\\\" text=\\\"This is the card one.\\\" />\\n  <Block src=\\\"card\\\" heading=\\\"Heading One\\\" text=\\\"This is the card two.\\\" />\\n</Grid>\\n\")), mdx(\"h2\", null, \"useBlock\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useBlock\"), \" hook can be used to retrieve and filter blocks.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { useBlock } from \\\"@reflexjs/gatsby-theme-block\\\"\\n\\n// Returns the block from /content/blocks/branding.\\nconst [branding] = useBlock(\\\"branding\\\")\\n\\n// Returns the block from /content/blocks/shared/bio.\\nconst [bio] = useBlock(\\\"shared/bio\\\")\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#add-a-block","title":"Add a block"},{"url":"#using-blocks","title":"Using blocks"},{"url":"#styling-blocks","title":"Styling blocks"},{"url":"#dynamic-blocks","title":"Dynamic blocks","items":[{"items":[{"items":[{"url":"#using-props-with-blocks","title":"Using props with blocks"}]}]}]},{"url":"#useblock","title":"useBlock"}],"timeToRead":1,"data":{"title":"Blocks","excerpt":"Group components together in a block and use them on pages.","rawBody":"---\ntitle: Blocks\nexcerpt: Group components together in a block and use them on pages.\n---\n\n## Add a block\n\nTo add a block, simply create an `.mdx` file in the `/content/blocks` directory.\n\n```\nmysite\n  └── content\n    └── blocks\n      └── card.mdx // highlight-line\n```\n\n```md title=content/blocks/card.mdx\n<Div borderWidth=\"1px\" rounded=\"5px\">\n  <Image src=\"placeholder.jpg\" />\n  <Div p=\"6\">\n    <H4 my=\"0\">Heading</H4>\n    <P mb=\"0\">This is some text.</P>\n  </Div>\n</Div>\n```\n\n## Using blocks\n\nTo use a block on a page, add the block using the block name.\n\n```mdx\n// This will display the block at content/blocks/card.mdx\n\n<Block src=\"card\" />\n```\n\n## Styling blocks\n\nBlocks can be styled like any other component. Simply pass the style as props.\n\n```jsx\n<Block src=\"card\" bg=\"primary\" color=\"white\" />\n```\n\n## Dynamic blocks\n\nBlocks can accept props and this makes blocks really powerful.\n\nWrap the `card` block we created in a named export.\n\n```jsx\nexport const Card = ({ heading, text, image }) => (\n  <Div borderWidth=\"1px\" rounded=\"5px\">\n    <Image src={image} />\n    <Div p=\"6\">\n      <H4 my=\"0\">{heading}</H4>\n      <P mb=\"0\">{text}</P>\n    </Div>\n  </Div>\n)\n```\n\n##### Using props with blocks\n\n```jsx\n<Grid col=\"2\" gap=\"4\">\n  <Block src=\"card\" heading=\"Heading One\" text=\"This is the card one.\" />\n  <Block src=\"card\" heading=\"Heading One\" text=\"This is the card two.\" />\n</Grid>\n```\n\n## useBlock\n\nThe `useBlock` hook can be used to retrieve and filter blocks.\n\n```jsx\nimport { useBlock } from \"@reflexjs/gatsby-theme-block\"\n\n// Returns the block from /content/blocks/branding.\nconst [branding] = useBlock(\"branding\")\n\n// Returns the block from /content/blocks/shared/bio.\nconst [bio] = useBlock(\"shared/bio\")\n```\n"}}},"pageContext":{"id":"66622ac3-9de6-5353-9fe9-1ca3f364af55","prev":"f5d61113-53e9-5ac3-9a04-4501d865850f","next":"5e52756e-ee44-5e93-bf0b-ce94efc876c8"}},"staticQueryHashes":["2206637893","2206637893","2723618800","2723618800","2877882650","2877882650","3223469662","3223469662","3699512716","3699512716","4071972417","4071972417"]}