{"componentChunkName":"component---node-modules-reflexjs-gatsby-theme-doc-src-doc-template-js","path":"/docs/images","result":{"data":{"doc":{"__typename":"MdxDoc","id":"0544563c-3bc9-5c99-bcb4-c7c776d9475e","title":"Images","slug":"/docs/images","excerpt":"Handling local and remote images in Reflex.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Images\",\n  \"excerpt\": \"Handling local and remote images in Reflex.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Callout = makeShortcode(\"Callout\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Local images\"), mdx(\"p\", null, \"To use and reference images in your content, place your images in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/images\"), \" directory.\"), mdx(\"p\", null, \"Then reference the image using its path.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"name-of-image.png\\\" alt=\\\"An image\\\" />\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component is a wrapper around Gatsby Image. You can learn more about Gatsby image \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/packages/gatsby-image/\"\n  }), \"here\"), \".\"), mdx(\"h2\", null, \"Remote images\"), mdx(\"p\", null, \"Remote images can be used the same way.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"https://example.com/image.png\\\" alt=\\\"External image\\\" />\\n\")), mdx(Callout, {\n    level: \"secondary\",\n    mdxType: \"Callout\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": Due to a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gatsbyjs/gatsby/issues/19785\"\n  }), \"bug\"), \" with gatsby-remark-images\\nand mdx, we are using a workaround for images. We'll fix this once the bug is resolved.\")), mdx(\"h2\", null, \"Aspect ratio\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Image\"), \" component has support for aspect ratio using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aspectRatio\"), \" prop:\"), mdx(\"h3\", null, \"4/3\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"placeholder.jpg\\\" aspectRatio={4 / 3} />\\n\")), mdx(Image, {\n    src: \"placeholder.jpg\",\n    aspectRatio: 4 / 3,\n    maxW: \"50%\",\n    mdxType: \"Image\"\n  }), mdx(\"h3\", null, \"16/8\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Image src=\\\"placeholder.jpg\\\" aspectRatio={16 / 8} />\\n\")), mdx(Image, {\n    src: \"placeholder.jpg\",\n    aspectRatio: 16 / 8,\n    maxW: \"50%\",\n    mdxType: \"Image\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#local-images","title":"Local images"},{"url":"#remote-images","title":"Remote images"},{"url":"#aspect-ratio","title":"Aspect ratio","items":[{"url":"#43","title":"4/3"},{"url":"#168","title":"16/8"}]}],"timeToRead":1,"data":{"title":"Images","excerpt":"Handling local and remote images in Reflex.","rawBody":"---\ntitle: Images\nexcerpt: Handling local and remote images in Reflex.\n---\n\n## Local images\n\nTo use and reference images in your content, place your images in the `content/images` directory.\n\nThen reference the image using its path.\n\n```jsx\n<Image src=\"name-of-image.png\" alt=\"An image\" />\n```\n\nThe `Image` component is a wrapper around Gatsby Image. You can learn more about Gatsby image [here](https://www.gatsbyjs.org/packages/gatsby-image/).\n\n## Remote images\n\nRemote images can be used the same way.\n\n```jsx\n<Image src=\"https://example.com/image.png\" alt=\"External image\" />\n```\n\n<Callout level=\"secondary\">\n\n**Note**: Due to a [bug](https://github.com/gatsbyjs/gatsby/issues/19785) with gatsby-remark-images\nand mdx, we are using a workaround for images. We'll fix this once the bug is resolved.\n\n</Callout>\n\n## Aspect ratio\n\nThe `Image` component has support for aspect ratio using the `aspectRatio` prop:\n\n### 4/3\n\n```jsx\n<Image src=\"placeholder.jpg\" aspectRatio={4 / 3} />\n```\n\n<Image src=\"placeholder.jpg\" aspectRatio={4 / 3} maxW=\"50%\" />\n\n### 16/8\n\n```jsx\n<Image src=\"placeholder.jpg\" aspectRatio={16 / 8} />\n```\n\n<Image src=\"placeholder.jpg\" aspectRatio={16 / 8} maxW=\"50%\" />\n"}},"prev":{"__typename":"MdxDoc","id":"ab0e55c3-c23a-53f7-8020-8476c500e988","title":"Navs","slug":"/docs/navs","excerpt":"Use navs to build header, footer and other navigation menus using mdx files.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Navs\",\n  \"excerpt\": \"Use navs to build header, footer and other navigation menus using mdx files.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Add a nav\"), mdx(\"p\", null, \"To add a nav, simply create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".mdx\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/content/navs\"), \" directory.\"), mdx(\"p\", null, \"Navs uses using simple lists of links.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/navs/main.mdx\",\n    \"title\": \"content/navs/main.mdx\"\n  }), \"- [Home](/home)\\n- [Blocks](/blocks)\\n  - [Headers](/blocks/headers)\\n  - [Hero](/blocks/hero)\\n  - [Footers](/blocks/footers)\\n- [Docs](/docs)\\n  - [Components](/docs/components)\\n  - [Images](/docs/images)\\n\")), mdx(\"h2\", null, \"Rendering navs\"), mdx(\"p\", null, \"Once your nav has been created, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NavMenu\"), \" component to render the nav.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=content/blocks/header.mdx\",\n    \"title\": \"content/blocks/header.mdx\"\n  }), \"<NavMenu name=\\\"example\\\" />\\n\")), mdx(\"h2\", null, \"Add dropdown\"), mdx(\"p\", null, \"Add a dropdown by using a nested list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\",\n    \"metastring\": \"title=content/navs/example.mdx\",\n    \"title\": \"content/navs/example.mdx\"\n  }), \"- [Home](/)\\n- Dropdown // highlight-line\\n  - [Item One](/item-one) // highlight-line\\n  - [Item Two](/item-two) // highlight-line\\n  - [Item Three](/item-three) // highlight-line\\n- [About](/about)\\n- [Contact](/contact)\\n\")), mdx(\"h2\", null, \"Add mega menu\"), mdx(\"p\", null, \"To create a mega menu, use a block as a dropdown.\"), mdx(\"p\", null, \"Create a block in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content/blocks/example-nav-block.mdx\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=content/blocks/example-nav-block.mdx\",\n    \"title\": \"content/blocks/example-nav-block.mdx\"\n  }), \"<Div>\\n  <Grid p=\\\"4\\\" col=\\\"1fr 1fr\\\" w=\\\"460px\\\" gap=\\\"10\\\">\\n    <Div>\\n      <H4 my=\\\"0\\\" fontSize=\\\"md\\\">\\n        Section One\\n      </H4>\\n      <P mt=\\\"2\\\" mb=\\\"0\\\" fontSize=\\\"sm\\\">\\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\\n        totam sit aliquid.\\n      </P>\\n    </Div>\\n    <Div>\\n      <H4 my=\\\"0\\\" fontSize=\\\"md\\\">\\n        Section One\\n      </H4>\\n      <P mt=\\\"2\\\" mb=\\\"0\\\" fontSize=\\\"sm\\\">\\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\\n        totam sit aliquid.\\n      </P>\\n    </Div>\\n  </Grid>\\n  <Flexbox bg=\\\"muted\\\" px=\\\"2\\\" py=\\\"2\\\">\\n    <Button variant=\\\"link sm\\\">\\n      Learn more\\n      <Icon name=\\\"arrow-right\\\" ml=\\\"2\\\" size=\\\"4\\\" lineHeight=\\\"1\\\" />\\n    </Button>\\n  </Flexbox>\\n</Div>\\n\")), mdx(\"p\", null, \"Next, add this block to your nav.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-mdx\",\n    \"metastring\": \"title=content/navs/example.mdx\",\n    \"title\": \"content/navs/example.mdx\"\n  }), \"- [Home](/)\\n- [About](/about)\\n- Dropdown\\n  - [Item One](/item-one)\\n  - [Item Two](/item-two)\\n  - [Item Three](/item-three)\\n- Mega menu // highlight-line\\n  - <Block src=\\\"example-nav-block\\\" /> // highlight-line\\n- [Contact](/contact)\\n\")), mdx(\"h2\", null, \"useNav\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useNav\"), \" hook can be used to retrieve and filter navs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=blocks/main-nav.mdx\",\n    \"title\": \"blocks/main-nav.mdx\"\n  }), \"import { useNav } from \\\"@reflexjs/gatsby-theme-nav\\\"\\n\\nexport const MainNav = () => {\\n  const [main] = useNav(\\\"main\\\")\\n  return main.items ? (\\n    <Ul>\\n      {main.items.map(({ value, url, items }, index) => (\\n        <Li key={index}>\\n          <Link href={url}>{value}</Link>\\n        </Li>\\n      ))}\\n    </Ul>\\n  ) : null\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#add-a-nav","title":"Add a nav"},{"url":"#rendering-navs","title":"Rendering navs"},{"url":"#add-dropdown","title":"Add dropdown"},{"url":"#add-mega-menu","title":"Add mega menu"},{"url":"#usenav","title":"useNav"}],"timeToRead":1,"data":{"title":"Navs","excerpt":"Use navs to build header, footer and other navigation menus using mdx files.","rawBody":"---\ntitle: Navs\nexcerpt: Use navs to build header, footer and other navigation menus using mdx files.\n---\n\n## Add a nav\n\nTo add a nav, simply create an `.mdx` file in the `/content/navs` directory.\n\nNavs uses using simple lists of links.\n\n```md title=content/navs/main.mdx\n- [Home](/home)\n- [Blocks](/blocks)\n  - [Headers](/blocks/headers)\n  - [Hero](/blocks/hero)\n  - [Footers](/blocks/footers)\n- [Docs](/docs)\n  - [Components](/docs/components)\n  - [Images](/docs/images)\n```\n\n## Rendering navs\n\nOnce your nav has been created, you can use the `NavMenu` component to render the nav.\n\n```jsx title=content/blocks/header.mdx\n<NavMenu name=\"example\" />\n```\n\n## Add dropdown\n\nAdd a dropdown by using a nested list.\n\n```mdx title=content/navs/example.mdx\n- [Home](/)\n- Dropdown // highlight-line\n  - [Item One](/item-one) // highlight-line\n  - [Item Two](/item-two) // highlight-line\n  - [Item Three](/item-three) // highlight-line\n- [About](/about)\n- [Contact](/contact)\n```\n\n## Add mega menu\n\nTo create a mega menu, use a block as a dropdown.\n\nCreate a block in `content/blocks/example-nav-block.mdx`\n\n```jsx title=content/blocks/example-nav-block.mdx\n<Div>\n  <Grid p=\"4\" col=\"1fr 1fr\" w=\"460px\" gap=\"10\">\n    <Div>\n      <H4 my=\"0\" fontSize=\"md\">\n        Section One\n      </H4>\n      <P mt=\"2\" mb=\"0\" fontSize=\"sm\">\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\n        totam sit aliquid.\n      </P>\n    </Div>\n    <Div>\n      <H4 my=\"0\" fontSize=\"md\">\n        Section One\n      </H4>\n      <P mt=\"2\" mb=\"0\" fontSize=\"sm\">\n        Autem maiores ab praesentium. Blanditiis numquam eaque odit. Corporis\n        totam sit aliquid.\n      </P>\n    </Div>\n  </Grid>\n  <Flexbox bg=\"muted\" px=\"2\" py=\"2\">\n    <Button variant=\"link sm\">\n      Learn more\n      <Icon name=\"arrow-right\" ml=\"2\" size=\"4\" lineHeight=\"1\" />\n    </Button>\n  </Flexbox>\n</Div>\n```\n\nNext, add this block to your nav.\n\n```mdx title=content/navs/example.mdx\n- [Home](/)\n- [About](/about)\n- Dropdown\n  - [Item One](/item-one)\n  - [Item Two](/item-two)\n  - [Item Three](/item-three)\n- Mega menu // highlight-line\n  - <Block src=\"example-nav-block\" /> // highlight-line\n- [Contact](/contact)\n```\n\n## useNav\n\nThe `useNav` hook can be used to retrieve and filter navs.\n\n```jsx title=blocks/main-nav.mdx\nimport { useNav } from \"@reflexjs/gatsby-theme-nav\"\n\nexport const MainNav = () => {\n  const [main] = useNav(\"main\")\n  return main.items ? (\n    <Ul>\n      {main.items.map(({ value, url, items }, index) => (\n        <Li key={index}>\n          <Link href={url}>{value}</Link>\n        </Li>\n      ))}\n    </Ul>\n  ) : null\n}\n```\n"}},"next":{"__typename":"MdxDoc","id":"fe8be3ab-2904-524d-a16c-3e7554371c1f","title":"Metatags","slug":"/docs/metatags","excerpt":"Add Open Graph and Twitter meta tags to your site.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Metatags\",\n  \"excerpt\": \"Add Open Graph and Twitter meta tags to your site.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar P = makeShortcode(\"P\");\nvar Callout = makeShortcode(\"Callout\");\nvar Button = makeShortcode(\"Button\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Installation\"), mdx(P, {\n    fontSize: \"xl\",\n    fontWeight: \"bold\",\n    mdxType: \"P\"\n  }, \"Step 1: Add the metatags package\"), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@reflexjs/gatsby-plugin-metatags\"), \" package.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @reflexjs/gatsby-plugin-metatags\\n\")), mdx(P, {\n    fontSize: \"xl\",\n    fontWeight: \"bold\",\n    pt: \"10\",\n    mdxType: \"P\"\n  }, \"Step 2: Enable meta tags for the Page type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-config.js\",\n    \"title\": \"gatsby-config.js\"\n  }), \"require(`dotenv`).config()\\n\\nmodule.exports = {\\n  siteMetadata: {\\n    title: \\\"Reflex\\\",\\n    description: \\\"Starter for Reflex.\\\",\\n    siteUrl: process.env.SITE_URL || \\\"http://localhost:8000\\\",\\n  },\\n  plugins: [\\n    \\\"@reflexjs/gatsby-theme-base\\\"\\n    \\\"@reflexjs/gatsby-theme-post\\\",\\n    // highlight-start\\n    {\\n      resolve: \\\"@reflexjs/gatsby-plugin-metatags\\\",\\n      options: {\\n        types: [\\n          `Page`\\n        ]\\n      }\\n    }\\n    // highlight-end\\n  ],\\n}\\n\")), mdx(P, {\n    fontSize: \"xl\",\n    fontWeight: \"bold\",\n    pt: \"10\",\n    mdxType: \"P\"\n  }, \"Step 3: Add meta tags to a page\"), mdx(\"p\", null, \"Edit your page and add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metatags\"), \".\"), mdx(Callout, {\n    mb: \"10\",\n    mdxType: \"Callout\"\n  }, mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": If you do not provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metatags\"), \" values, it will automatically be generated from the page title, description and image.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\",\n    \"metastring\": \"title=content/profiles/2020-07-08-slug-of-post.mdx\",\n    \"title\": \"content/profiles/2020-07-08-slug-of-post.mdx\"\n  }), \"---\\ntitle: Title of the page\\nexcerpt: A short description for this post.\\nimage: image.jpg\\n// highlight-start\\nmetatags:\\n  title: Title of the page\\n  description: A description for meta description\\n  og:\\n    title: A custom title for open graph.\\n    description: Custom description for open graph.\\n    image: Image for open graph.\\n    type: article\\n  twitter:\\n    title: A custom title for Twitter cards.\\n    description: Description for Twitter cards.\\n    image: Custom image for Twitter cards.\\n    card: summary or summary_large_image\\n// highlight-end\\n---\\n\\nPage content goes here.\\n\")), mdx(\"h2\", null, \"Options\"), mdx(\"p\", null, \"Meta tags can be configured globally, per types and using path matching.\"), mdx(\"h3\", null, \"global\"), mdx(\"p\", null, \"Global meta tags are used on all pages where specific meta tags are not set. This is your default meta tags.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\\n  options: {\\n    // highlight-start\\n    global: {\\n      title: \\\"Megan Morales\\\",\\n      description: \\\"Wildlife Photographer and Storyteller.\\\",\\n      image: \\\"default.jpg\\\",\\n    },\\n    // highlight-end\\n  },\\n},\\n\")), mdx(\"h3\", null, \"types\"), mdx(\"p\", null, \"You can also enable and configure meta tags based on the node type. Example: a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Page\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Profile\"), \" can have different tags.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\\n  options: {\\n    // highlight-start\\n    types: [\\n      // Enable meta tags for Page type.\\n      `Page`,\\n      {\\n        // Enable meta tags for PostTag with defaults.\\n        type: `PostTag`,\\n        defaults: {\\n          title: (tag) => tag.name,\\n          description: (tag) => `Posts tagged under ${tag.name}.`,\\n        },\\n      },\\n    ],\\n    // highlight-end\\n  },\\n},\\n\")), mdx(\"h3\", null, \"paths\"), mdx(\"p\", null, \"You can also set custom tags using path matching.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\\n  options: {\\n    // highlight-start\\n    paths: [\\n      {\\n        pathname: `/blog{,/**}`,\\n        defaults: {\\n          title: `The Wildlife Blog`,\\n        },\\n      },\\n    ],\\n    // highlight-end\\n  },\\n},\\n\")), mdx(\"p\", null, \"The above config will set a default/fallback title for all pages starting with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/blog\"), \" path.\"), mdx(\"h2\", null, \"Debug mode\"), mdx(\"p\", null, \"Turn on debug mode during development to preview social cards.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\\n  options: {\\n    // highlight-start\\n    debug: true,\\n    // highlight-end\\n  },\\n},\\n\")), mdx(\"p\", null, \"This will add a \", mdx(Button, {\n    mx: \"2\",\n    fontSize: \"14px\",\n    p: \"10px 12px\",\n    mdxType: \"Button\"\n  }, \"Metatags\"), \" button that you can click to toggle the preview.\"), mdx(Image, {\n    src: \"metatags-debug.jpg\",\n    caption: \"Debugging metatags\",\n    borderWidth: \"1px\",\n    rounded: \"md\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"Note: this is only available during development.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":[{"url":"#installation","title":"Installation"},{"url":"#options","title":"Options","items":[{"url":"#global","title":"global"},{"url":"#types","title":"types"},{"url":"#paths","title":"paths"}]},{"url":"#debug-mode","title":"Debug mode"}],"timeToRead":1,"data":{"title":"Metatags","excerpt":"Add Open Graph and Twitter meta tags to your site.","rawBody":"---\ntitle: Metatags\nexcerpt: Add Open Graph and Twitter meta tags to your site.\n---\n\n## Installation\n\n<P fontSize=\"xl\" fontWeight=\"bold\">\n  Step 1: Add the metatags package\n</P>\n\nAdd the `@reflexjs/gatsby-plugin-metatags` package.\n\n```sh\nnpm i @reflexjs/gatsby-plugin-metatags\n```\n\n<P fontSize=\"xl\" fontWeight=\"bold\" pt=\"10\">\n  Step 2: Enable meta tags for the Page type\n</P>\n\n```js title=gatsby-config.js\nrequire(`dotenv`).config()\n\nmodule.exports = {\n  siteMetadata: {\n    title: \"Reflex\",\n    description: \"Starter for Reflex.\",\n    siteUrl: process.env.SITE_URL || \"http://localhost:8000\",\n  },\n  plugins: [\n    \"@reflexjs/gatsby-theme-base\"\n    \"@reflexjs/gatsby-theme-post\",\n    // highlight-start\n    {\n      resolve: \"@reflexjs/gatsby-plugin-metatags\",\n      options: {\n        types: [\n          `Page`\n        ]\n      }\n    }\n    // highlight-end\n  ],\n}\n```\n\n<P fontSize=\"xl\" fontWeight=\"bold\" pt=\"10\">\n  Step 3: Add meta tags to a page\n</P>\n\nEdit your page and add `metatags`.\n\n<Callout mb=\"10\">\n\n**Note**: If you do not provide the `metatags` values, it will automatically be generated from the page title, description and image.\n\n</Callout >\n\n```md title=content/profiles/2020-07-08-slug-of-post.mdx\n---\ntitle: Title of the page\nexcerpt: A short description for this post.\nimage: image.jpg\n// highlight-start\nmetatags:\n  title: Title of the page\n  description: A description for meta description\n  og:\n    title: A custom title for open graph.\n    description: Custom description for open graph.\n    image: Image for open graph.\n    type: article\n  twitter:\n    title: A custom title for Twitter cards.\n    description: Description for Twitter cards.\n    image: Custom image for Twitter cards.\n    card: summary or summary_large_image\n// highlight-end\n---\n\nPage content goes here.\n```\n\n## Options\n\nMeta tags can be configured globally, per types and using path matching.\n\n### global\n\nGlobal meta tags are used on all pages where specific meta tags are not set. This is your default meta tags.\n\n```js\n{\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\n  options: {\n    // highlight-start\n    global: {\n      title: \"Megan Morales\",\n      description: \"Wildlife Photographer and Storyteller.\",\n      image: \"default.jpg\",\n    },\n    // highlight-end\n  },\n},\n```\n\n### types\n\nYou can also enable and configure meta tags based on the node type. Example: a `Page` and a `Profile` can have different tags.\n\n```js\n{\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\n  options: {\n    // highlight-start\n    types: [\n      // Enable meta tags for Page type.\n      `Page`,\n      {\n        // Enable meta tags for PostTag with defaults.\n        type: `PostTag`,\n        defaults: {\n          title: (tag) => tag.name,\n          description: (tag) => `Posts tagged under ${tag.name}.`,\n        },\n      },\n    ],\n    // highlight-end\n  },\n},\n```\n\n### paths\n\nYou can also set custom tags using path matching.\n\n```js\n{\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\n  options: {\n    // highlight-start\n    paths: [\n      {\n        pathname: `/blog{,/**}`,\n        defaults: {\n          title: `The Wildlife Blog`,\n        },\n      },\n    ],\n    // highlight-end\n  },\n},\n```\n\nThe above config will set a default/fallback title for all pages starting with the `/blog` path.\n\n## Debug mode\n\nTurn on debug mode during development to preview social cards.\n\n```js\n{\n  resolve: `@reflexjs/gatsby-plugin-metatags`,\n  options: {\n    // highlight-start\n    debug: true,\n    // highlight-end\n  },\n},\n```\n\nThis will add a <Button mx=\"2\" fontSize=\"14px\" p=\"10px 12px\">Metatags</Button> button that you can click to toggle the preview.\n\n<Image\n  src=\"metatags-debug.jpg\"\n  caption=\"Debugging metatags\"\n  borderWidth=\"1px\"\n  rounded=\"md\"\n/>\n\nNote: this is only available during development.\n"}}},"pageContext":{"id":"0544563c-3bc9-5c99-bcb4-c7c776d9475e","prev":"ab0e55c3-c23a-53f7-8020-8476c500e988","next":"fe8be3ab-2904-524d-a16c-3e7554371c1f"}},"staticQueryHashes":["2206637893","2206637893","2723618800","2723618800","2877882650","2877882650","3223469662","3223469662","3699512716","3699512716","4071972417","4071972417"]}